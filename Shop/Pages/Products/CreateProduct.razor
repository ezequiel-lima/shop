@page "/products/create"
@inject AppDbContext _context
@inject NavigationManager _navigationManager

<h3>CreateProduct</h3>

<EditForm Model="@_model" OnValidSubmit="@HandleSubmitAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="Title" class="form-label">
            Name
        </label>
        <InputText class="form-control" type="text" id="Title" @bind-Value="_model.Title"></InputText>
    </div>

    <div class="mb-3">
        <label for="Price" class="form-label">
            Price
        </label>
        <InputNumber class="form-control" type="number" id="Price" @bind-Value="_model.Price"></InputNumber>
    </div>

    <div class="mb-3">
        <label for="CategoryId" class="form-label">
            Category
        </label>
        <InputSelect id="CategoryId" @bind-Value="_model.CategoryId" class="form-control">
            @foreach (var item in _categories)
            {
                <option value="@item.Id">
                    @item.Name
                </option>
            }
        </InputSelect>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alet alert-danger" role="alert">
            @_errorMessage
        </div>
    }

    <button class="btn btn-success" type="submit">
        Salvar
    </button>

</EditForm>

@code {
    private Product _model = new();
    private List<Category> _categories = new();
    private string? _errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        _categories = await _context.Categories.AsNoTracking().ToListAsync();
        _model.CategoryId = _categories[0].Id;
    }

    async Task HandleSubmitAsync()
    {
        try
        {
            await _context.Products.AddAsync(_model);
            await _context.SaveChangesAsync();
            _navigationManager.NavigateTo("/products");
        }
        catch (Exception error)
        {
            _errorMessage = error.Message;
        }
    }
}
